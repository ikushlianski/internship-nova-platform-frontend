import { NavgationMenu } from '@/features/top-navigation-menu/ui/NavgationMenu';
import { routing } from '@/i18n/routing';
import { NextIntlClientProvider } from 'next-intl';
import { getMessages, getTranslations, unstable_setRequestLocale } from 'next-intl/server';
import { ReactNode } from 'react';

type Props = {
  children: ReactNode;
  params: { locale: string };
};

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

export async function generateMetadata({ params: { locale } }: Omit<Props, 'children'>) {
  const t = await getTranslations({ locale, namespace: 'locale_layout' });

  return {
    title: t('title'),
    description: 'Generated by create next app',
    icons: {
      icon: [
        {
          rel: 'icon',
          sizes: 'any',
          type: 'image/svg+xml',
          url: '/assets/favicon/favicon.svg',
        },
        {
          rel: 'icon',
          sizes: '32x32',
          type: 'image/png',
          url: '/assets/favicon/favicon-32x32.png',
        },
        {
          rel: 'icon',
          sizes: '16x16',
          type: 'image/png',
          url: '/assets/favicon/favicon-16x16.png',
        },
      ],
      apple: '/assets/favicon/apple-touch-icon.png',
      other: [
        { rel: 'manifest', url: '/assets/favicon/site.webmanifest' },
        { rel: 'mask-icon', url: '/assets/favicon/safari-pinned-tab.svg', color: '#0092FC' },
      ],
    },
  };
}

export default async function LocaleLayout({ children, params: { locale } }: Props) {
  // Enable static rendering
  unstable_setRequestLocale(locale);

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages();

  return (
    <html className="h-full" lang={locale}>
      <body>
        <NextIntlClientProvider messages={messages}>
          <NavgationMenu />
          {children}
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
