{{ $front_name := "marketing-website"}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "nova-front.fullname" . }}-{{ $front_name }}
  labels:
    {{- include "nova-front.deploymentLabels" . | nindent 4 }}
    app: {{ include "nova-front.fullname" . }}-{{ $front_name }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app: {{ include "nova-front.fullname" . }}-{{ $front_name }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "nova-front.deploymentLabels" . | nindent 8 }}
        app: {{ include "nova-front.fullname" . }}-{{ $front_name }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "nova-front.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      - name: {{ .Chart.Name }}-npm-ci
        image: node:22
        workingDir: /usr/src/server                 ############################## REWORK!!!!!
        # workingDir: {{ .Values.workingDir }}      ############################## REWORK!!!!!
        # command: ["npm"]
        # args: ["ci"]
        command: ["/bin/sh"]
        args:
          - -c
          - >-
              wget http://nginx-static-files.nova-dev.svc.cluster.local/{{.Release.Namespace}}/nova-english-marketing-website.zip &&
              unzip -o nova-english-marketing-website.zip &&
              rm nova-english-marketing-website.zip &&
              chmod +x -R node_modules/ 
        volumeMounts:                       ############################## REWORK!!!!!
        - name: nova-{{ $front_name }}         ############################## REWORK!!!!!
          mountPath: "/usr/src/server/"     ############################## REWORK!!!!!
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: node:22            ############################## REWORK!!!!!
          imagePullPolicy: {{ .Values.image.pullPolicy }}
        #   workingDir: {{ .Values.workingDir }}
          workingDir: /usr/src/server/apps/nova-english-marketing-website                 ############################## REWORK!!!!!
          env:          
            - name: "GATEWAY_HOST"
              value: "nova-api-gateway-service.{{.Release.Namespace}}.svc.cluster.local"
            - name: "NEXT_PUBLIC_API_V1_URL"
              value: "{{ .Values.application_environment }}.{{ .Values.domain_name }}/api/v1/"
          command: ["npm"]
          args: ["start", "--loglevel", "verbose"]
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            null
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:                       ############################## REWORK!!!!!
          - name: nova-{{ $front_name }}                ############################## REWORK!!!!!
            mountPath: "/usr/src/server/"     ############################## REWORK!!!!!



      volumes:                              ############################## REWORK!!!!!
      - name: nova-{{ $front_name }}       ############################## REWORK!!!!!
      {{- with .Values.nodeSelector }}      ############################## REWORK!!!!!
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "nova-front.fullname" . }}-{{ $front_name }}-service
  labels:
    app: {{ include "nova-front.fullname" . }}-{{ $front_name }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: 80              ############################## REWORK!!!!!
      targetPort: 3000      ############################## REWORK!!!!!
      protocol: TCP
      name: http
  selector:
    app: {{ include "nova-front.fullname" . }}-{{ $front_name }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ include "nova-front.fullname" . }}-{{ $front_name }}-ingress
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt
    # nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - {{ .Values.application_environment }}.{{ .Values.domain_name }}
      secretName: qa1-novaenglish-by-tls
  rules:
  - host: {{ .Values.application_environment }}.{{ .Values.domain_name }}
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: {{ include "nova-front.fullname" . }}-{{ $front_name }}-service
            port:
              number: 80